package com.mtbs.appointments.mapper;

import com.mtbs.appointments.dto.AppointmentResponse;
import com.mtbs.appointments.dto.CreateAppointmentRequest;
import com.mtbs.appointments.dto.ServiceDTO;
import com.mtbs.appointments.dto.UpdateAppointmentRequest;
import com.mtbs.appointments.model.Appointment;
import com.mtbs.appointments.model.ServiceModel;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Named;
import org.mapstruct.MappingTarget;

import java.util.List;
import java.util.stream.Collectors;

/**
 * MapStruct mapper interface for converting between DTOs and JPA entities for Appointments and Services.
 * 'componentModel = "spring"' makes MapStruct generate a Spring component,
 * so it can be injected and used as a Spring bean.
 */
@Mapper(componentModel = "spring")
public interface AppointmentMapper {

    // --- Mapping from DTO to Entity for Creation ---

    /**
     * Maps a CreateAppointmentRequest DTO to a new Appointment entity.
     * Fields like 'id', 'createdAt', 'updatedAt', 'totalCost', and 'status' are ignored here
     * because they are typically set by the service layer during creation.
     * The list of 'services' (ServiceDTOs) is mapped to a list of Service entities
     * using the custom 'serviceDtoListToServiceList' named method.
     *
     * @param request The CreateAppointmentRequest DTO containing details for the new appointment.
     * @return A new Appointment entity populated from the DTO.
     */
    @Mapping(target = "id", ignore = true) // ID will be generated in service layer
    @Mapping(target = "createdAt", ignore = true) // Set in service layer
    @Mapping(target = "updatedAt", ignore = true) // Set in service layer
    @Mapping(target = "totalCost", ignore = true) // Calculated in service layer
    @Mapping(target = "status", ignore = true)   // Set in service layer
    @Mapping(target = "services", qualifiedByName = "serviceDtoListToServiceList")
    Appointment toEntity(CreateAppointmentRequest request);

    /**
     * Maps an UpdateAppointmentRequest DTO onto an existing Appointment entity.
     * This method is used to update the fields of an already persisted entity.
     * 'id' and 'createdAt' are ignored as they should not change on update.
     * 'updatedAt' and 'totalCost' are ignored as they are set/recalculated in the service layer.
     * The 'services' list is handled by the custom named method, which will essentially
     * replace the existing services with the new ones provided in the DTO.
     *
     * @param request The UpdateAppointmentRequest DTO containing updated details.
     * @param appointment The existing Appointment entity to be updated.
     */
    @Mapping(target = "id", ignore = true) // ID should not be updated
    @Mapping(target = "createdAt", ignore = true) // Creation timestamp should not be updated
    @Mapping(target = "updatedAt", ignore = true) // Updated in service layer
    @Mapping(target = "totalCost", ignore = true) // Recalculated in service layer
    @Mapping(target = "services", qualifiedByName = "serviceDtoListToServiceList")
    void updateEntityFromDto(UpdateAppointmentRequest request, @MappingTarget Appointment appointment);

    /**
     * Maps a single ServiceDTO to a Service entity.
     * 'id' is ignored as it will be auto-generated by the database for new service entities.
     * 'appointment' is ignored as the bidirectional link is set manually in the service layer
     * to ensure correct relationship management.
     *
     * @param dto The ServiceDTO to map.
     * @return A new Service entity.
     */
    @Mapping(target = "id", ignore = true) // Service ID is auto-generated by DB
    @Mapping(target = "appointment", ignore = true) // Set in service layer (bidirectional relationship)
    ServiceModel toServiceEntity(ServiceDTO dto);

    /**
     * Custom named method to convert a list of ServiceDTOs to a list of Service entities.
     * Used by the parent Appointment mapping methods.
     *
     * @param serviceDTOs The list of ServiceDTOs to convert.
     * @return A new list of Service entities.
     */
    @Named("serviceDtoListToServiceList")
    default List<ServiceModel> serviceDtoListToServiceList(List<ServiceDTO> serviceDTOs) {
        if (serviceDTOs == null) {
            return null;
        }
        // Stream through ServiceDTOs and map each one to a Service entity
        return serviceDTOs.stream()
                .map(this::toServiceEntity) // Reuse the toServiceEntity method
                .collect(Collectors.toList());
    }


    // --- Mapping from Entity to DTO for Response ---

    /**
     * Maps an Appointment entity to an AppointmentResponse DTO.
     * This is the primary method for converting a database entity into a client-facing response.
     * The 'services' (Service entities) are mapped to a list of ServiceDTOs
     * using the custom 'serviceListToServiceDtoList' named method.
     *
     * @param appointment The Appointment entity to map.
     * @return An AppointmentResponse DTO.
     */
    @Mapping(target = "services", qualifiedByName = "serviceListToServiceDtoList")
    AppointmentResponse toResponseDto(Appointment appointment);

    /**
     * Maps a single Service entity to a ServiceDTO.
     * This is used when constructing the AppointmentResponse.
     *
     * @param serviceModel The Service entity to map.
     * @return A ServiceDTO.
     */
    ServiceDTO toServiceDto(ServiceModel serviceModel);

    /**
     * Custom named method to convert a list of Service entities to a list of ServiceDTOs.
     * Used by the parent Appointment mapping method for responses.
     *
     * @param services The list of Service entities to convert.
     * @return A new list of ServiceDTOs.
     */
    @Named("serviceListToServiceDtoList")
    default List<ServiceDTO> serviceListToServiceDtoList(List<ServiceModel> services) {
        if (services == null) {
            return null;
        }
        // Stream through Service entities and map each one to a ServiceDTO
        return services.stream()
                .map(this::toServiceDto) // Reuse the toServiceDto method
                .collect(Collectors.toList());
    }

    /**
     * The original toDtoList method, kept for compatibility if still used elsewhere.
     * If all List<Appointment>-to-List<DTO> conversions should go through toResponseDto, this can be removed.
     * @param appointmentList The list of Appointment entities to map.
     * @return A list of AppointmentResponse DTOs.
     */
    List<AppointmentResponse> toDtoList(List<Appointment> appointmentList);

}

